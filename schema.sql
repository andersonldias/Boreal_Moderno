-- Schema para Supabase (PostgreSQL)
-- Boreal Moderno

-- 1. Tabela de Perfis de Usuário
-- Esta tabela armazena dados públicos dos usuários e é ligada à tabela de autenticação do Supabase.
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  nome VARCHAR(100) NOT NULL,
  role TEXT NOT NULL DEFAULT 'funcionario' CHECK (role IN ('gestor', 'funcionario')),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- 2. Tabela de Obras
CREATE TABLE public.obras (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(200) NOT NULL,
  endereco TEXT NOT NULL,
  cliente VARCHAR(200) NOT NULL,
  data_inicio DATE,
  status TEXT DEFAULT 'planejada' CHECK (status IN ('planejada', 'em_andamento', 'em_finalizacao', 'concluida', 'pausada')),
  observacoes TEXT,
  created_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- 3. Tabela de Cômodos
CREATE TABLE public.comodos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  obra_id BIGINT NOT NULL REFERENCES public.obras(id) ON DELETE CASCADE,
  nome VARCHAR(100) NOT NULL,
  tipo_esquadria VARCHAR(100) NOT NULL,
  modelo VARCHAR(100),
  dimensoes VARCHAR(100),
  status TEXT DEFAULT 'nao_instalado' CHECK (status IN ('nao_instalado', 'instalado', 'em_instalacao')),
  observacao TEXT,
  data_instalacao TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- 4. Tabela de Funcionários (Equipe)
CREATE TABLE public.funcionarios (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(100) NOT NULL,
  funcao VARCHAR(100) NOT NULL,
  telefone VARCHAR(20),
  email VARCHAR(100),
  active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- 5. Tabela de Instalações
-- Relaciona cômodos e funcionários
CREATE TABLE public.instalacoes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  comodo_id BIGINT NOT NULL REFERENCES public.comodos(id) ON DELETE CASCADE,
  funcionario_id BIGINT NOT NULL REFERENCES public.funcionarios(id) ON DELETE CASCADE,
  data_instalacao TIMESTAMPTZ NOT NULL,
  observacoes TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- 6. Tabela de Fotos (será ligada ao Supabase Storage)
-- A coluna 'storage_path' guardará o caminho para o arquivo no Storage.
CREATE TABLE public.fotos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  obra_id BIGINT NOT NULL REFERENCES public.obras(id) ON DELETE CASCADE,
  comodo_id BIGINT REFERENCES public.comodos(id) ON DELETE CASCADE,
  titulo VARCHAR(255) NOT NULL,
  descricao TEXT,
  tipo TEXT CHECK (tipo IN ('Antes', 'Durante', 'Depois', 'Problema', 'Detalhe', 'Outro')),
  storage_path TEXT NOT NULL, -- Caminho do arquivo no Supabase Storage
  uploaded_by UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- 7. Habilitar Row Level Security (RLS)
-- É uma boa prática de segurança no Supabase.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.obras ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comodos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.funcionarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.instalacoes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.fotos ENABLE ROW LEVEL SECURITY;

-- 8. Políticas de Acesso (Exemplos)
-- Estas políticas definem quem pode ver e modificar os dados.

-- Usuários podem ver seus próprios perfis.
CREATE POLICY "User can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
-- Usuários podem atualizar seus próprios perfis.
CREATE POLICY "User can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Gestores podem ver/modificar todos os dados. Funcionários podem apenas ver.
CREATE POLICY "Gestores can manage all obras." ON public.obras FOR ALL USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'gestor');
CREATE POLICY "Funcionarios can view obras." ON public.obras FOR SELECT USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'funcionario');

-- Políticas similares devem ser criadas para as outras tabelas.

-- 9. Configuração do Supabase Storage
-- Crie um bucket chamado 'fotos_obras' no seu painel do Supabase.
-- Configure as seguintes políticas de acesso para o bucket:
/*
-- Permitir que usuários autenticados vejam as fotos:
CREATE POLICY "Authenticated users can view photos" ON storage.objects FOR SELECT USING (bucket_id = 'fotos_obras' AND auth.role() = 'authenticated');

-- Permitir que usuários autenticados enviem fotos:
CREATE POLICY "Authenticated users can upload photos" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'fotos_obras' AND auth.role() = 'authenticated');
*/
